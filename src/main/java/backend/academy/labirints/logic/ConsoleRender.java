package backend.academy.labirints.logic;

import backend.academy.labirints.model.Cell;
import backend.academy.labirints.model.Maze;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.Arrays;
import lombok.Getter;

/**
 * –ö–ª–∞—Å—Å —Å–æ–∑–¥–∞—é—â–∏–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –≤—ã–≤–æ–¥—è—â–∏–π –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
@SuppressWarnings({"RegexpSinglelineJava"})
@SuppressFBWarnings({"CLI_CONSTANT_LIST_INDEX"})
@Getter
public class ConsoleRender implements Render {
    private final static String PASSAGE = "‚¨úÔ∏è";
    private final static String WALL = "‚¨õ";
    private final static String BAD = "‚õî";
    private final static String GOOD = "‚úÖ";
    private final static String START = "üü¢";
    private final static String FINISH = "üõë";
    private final static String PATH = "üü™";
    private static Render instance;
    private final String[][] grid;

    /**
     * –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞(grid)
     * –≤–µ—Ä—Ö–Ω—è—è, –Ω–∏–∂–Ω—è—è, –ø—Ä–∞–≤–∞—è, –ª–µ–≤–∞—è - —Å—Ç–µ–Ω–∫–∏ WALL
     * –≤—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è —á–∞—Å—Ç—å - PASSAGE
     */
    public ConsoleRender(int height, int width) {
        this.grid = new String[height * 2 + 1][width * 2 + 1];
        Arrays.stream(grid).forEach(row -> Arrays.fill(row, WALL));

        for (int i = 1; i < height * 2; i++) {
            Arrays.fill(grid[i], PASSAGE);
        }

        for (int i = 1; i < height * 2; i++) {
            grid[i][0] = WALL;
            grid[i][width * 2] = WALL;
        }
    }

    public static Render getInstance(int height, int width) {
        if (instance == null) {
            instance = new ConsoleRender(height, width);
        }
        return instance;
    }

    /**
     * –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –≤ grid[height*2+1][width*2+1]
     * –ü–æ–º–µ—á–∞–µ—Ç –∫–ª–µ—Ç–∫–∏ grid GOOD, BAD, WALL, START, FINISH –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –≤ maze
     *
     * @param maze - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ
     * @return - instance ConsoleRender —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
     */
    @Override
    public Render renderLabyrinth(final Maze maze) {
        var labyrinth = maze.maze();

        for (int i = 0; i < maze.maze().length; i++) {
            for (int j = 0; j < maze.maze()[0].length; j++) {
                var cell = labyrinth[i][j];
                var gridRow = cell.coordinates().calculateGridY();
                var gridCol = cell.coordinates().calculateGridX();
                grid[gridRow][gridCol] = switch (cell.type()) {
                    case Cell.CellType.GOOD -> GOOD;
                    case Cell.CellType.BAD -> BAD;
                    case Cell.CellType.NOTHING -> PASSAGE;
                };
                grid[gridRow + 1][gridCol + 1] = WALL;
                for (var neigh : maze.walls().get(cell)) {
                    if (cell.x() + 1 == neigh.x() && cell.y() == neigh.y()) {
                        grid[gridRow][gridCol + 1] = WALL;
                    }
                    if (cell.x() == neigh.x() && cell.y() + 1 == neigh.y()) {
                        grid[gridRow + 1][gridCol] = WALL;
                    }
                }
            }
        }

        grid[maze.start().y() * 2 + 1][maze.start().x() * 2 + 1] = START;
        grid[maze.finish().y() * 2 + 1][maze.finish().x() * 2 + 1] = FINISH;

        return instance;
    }

    /**
     * –£–∂–µ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º grid —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ {@link #renderLabyrinth(Maze)}
     * –ü—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤ –Ω–µ–º –ø—É—Ç—å –ø–æ–º–µ—á–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–µ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–æ–º PATH
     *
     * @param maze - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ
     * @return - instance ConsoleRender —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
     */
    @Override
    public Render renderPath(final Maze maze) {
        System.out.println("–ü–£–¢–¨: ");
        for (int i = 0; i < maze.path().size() - 1; i++) {
            var cell = maze.path().get(i);
            var nextCell = maze.path().get(i + 1);
            var gridRow = cell.coordinates().calculateGridY();
            var gridCol = cell.coordinates().calculateGridX();
            if (!START.equals(grid[gridRow][gridCol]) && !FINISH.equals(grid[gridRow][gridCol])) {
                grid[gridRow][gridCol] = PATH;
            }
            var coordinates = cell.coordinates().getRelativePosition(nextCell.coordinates());
            grid[coordinates.y()][coordinates.x()] = PATH;
        }
        return instance;
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç grid –≤ –∫–æ–Ω—Å–æ–ª—å
     */
    @Override
    public void draw() {
        for (String[] strings : grid) {
            for (String string : strings) {
                System.out.print(string + "\t");
            }
            System.out.println();
        }
    }
}
